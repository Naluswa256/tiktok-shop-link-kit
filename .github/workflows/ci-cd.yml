name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Detect changes to determine what to build
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      ingestion-api: ${{ steps.changes.outputs.ingestion-api }}
      product-service: ${{ steps.changes.outputs.product-service }}
      whatsapp-service: ${{ steps.changes.outputs.whatsapp-service }}
      ai-workers: ${{ steps.changes.outputs.ai-workers }}
      libs: ${{ steps.changes.outputs.libs }}
      infra: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
            ingestion-api:
              - 'apps/ingestion-api/**'
            product-service:
              - 'apps/product-service/**'
            whatsapp-service:
              - 'apps/whatsapp-service/**'
            ai-workers:
              - 'apps/ai-workers/**'
            libs:
              - 'libs/**'
            infra:
              - 'infra/**'

  # Install dependencies and build shared libraries
  setup:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.libs == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.ingestion-api == 'true' || needs.changes.outputs.product-service == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build shared libraries
        run: |
          npm run build --workspace=libs/common
          npm run build --workspace=libs/config
      
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            libs/*/dist
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}

  # Lint and test
  lint-and-test:
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: always() && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.ingestion-api == 'true' || needs.changes.outputs.product-service == 'true' || needs.changes.outputs.libs == 'true')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            libs/*/dist
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run type-check
      
      - name: Run tests
        run: npm run test

  # Build and test AI workers
  ai-workers-test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.ai-workers == 'true'
    strategy:
      matrix:
        worker: [caption-parser, thumbnail-generator, auto-tagger]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        working-directory: apps/ai-workers/${{ matrix.worker }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        working-directory: apps/ai-workers/${{ matrix.worker }}
        run: |
          python -m pytest --cov=. --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: apps/ai-workers/${{ matrix.worker }}/coverage.xml
          flags: ai-workers-${{ matrix.worker }}

  # Build frontend
  build-frontend:
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            libs/*/dist
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
      
      - name: Build frontend
        run: npm run build:frontend
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: apps/frontend/dist

  # Build and push Docker images
  build-docker:
    runs-on: ubuntu-latest
    needs: [changes, lint-and-test]
    if: github.ref == 'refs/heads/main' && (needs.changes.outputs.ingestion-api == 'true' || needs.changes.outputs.product-service == 'true' || needs.changes.outputs.whatsapp-service == 'true')
    strategy:
      matrix:
        service: [ingestion-api, product-service, whatsapp-service]
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push image
        working-directory: apps/${{ matrix.service }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/tiktok-commerce-${{ matrix.service }}:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/tiktok-commerce-${{ matrix.service }}:$IMAGE_TAG $ECR_REGISTRY/tiktok-commerce-${{ matrix.service }}:latest
          docker push $ECR_REGISTRY/tiktok-commerce-${{ matrix.service }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/tiktok-commerce-${{ matrix.service }}:latest

  # Build and push AI worker images
  build-ai-workers:
    runs-on: ubuntu-latest
    needs: [changes, ai-workers-test]
    if: github.ref == 'refs/heads/main' && needs.changes.outputs.ai-workers == 'true'
    strategy:
      matrix:
        worker: [caption-parser, thumbnail-generator, auto-tagger]
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push image
        working-directory: apps/ai-workers/${{ matrix.worker }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/tiktok-commerce-${{ matrix.worker }}:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/tiktok-commerce-${{ matrix.worker }}:$IMAGE_TAG $ECR_REGISTRY/tiktok-commerce-${{ matrix.worker }}:latest
          docker push $ECR_REGISTRY/tiktok-commerce-${{ matrix.worker }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/tiktok-commerce-${{ matrix.worker }}:latest

  # Terraform plan
  terraform-plan:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.infra == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init
      
      - name: Terraform Plan
        working-directory: infra/terraform
        run: terraform plan -var-file=dev.tfvars -out=tfplan
      
      - name: Upload plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: infra/terraform/tfplan

  # Terraform apply (only on main branch)
  terraform-apply:
    runs-on: ubuntu-latest
    needs: [terraform-plan, build-docker, build-ai-workers]
    if: github.ref == 'refs/heads/main' && needs.changes.outputs.infra == 'true'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
          path: infra/terraform
      
      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init
      
      - name: Terraform Apply
        working-directory: infra/terraform
        run: terraform apply tfplan

  # Deploy frontend to S3/CloudFront
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build-frontend, terraform-apply]
    if: github.ref == 'refs/heads/main' && needs.changes.outputs.frontend == 'true'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: dist
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://${{ secrets.FRONTEND_S3_BUCKET }} --delete
      
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, terraform-apply]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
